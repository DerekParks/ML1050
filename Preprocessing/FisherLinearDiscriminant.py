""" An implementation of Fisher's Linear Discriminant.
"""

from scipy import *
import ML1050
from ML1050 import Example
from ML1050 import TrainingSet
from ML1050.Example import LabeledExample
from ML1050.TrainingSet import TrainingSet

def roundList(l,h):
    #print 'l',l
    rv=[]
    for i in l:
        ii=[]
        for j in i:
            #print 'round(',j,',',h,'):',round(j, h)
            ii.append(str(round(j,h)))
        rv.append(ii)
    return rv


class FisherLinearDiscriminant:
    def __init__(self, trainingSet, d=2):
        """Constructs a Fisher Linear Discriminant with the training set
        
        d is the dimensionality of the projected data (default is 2, projected onto a plane) 
        
        When we test Fisher Linear Discriminant we need to import parts of the ML1050 library
        >>> from Example import LabeledExample
        >>> from TrainingSet import createTrainingSet
        >>> from scipy import array
        
        Create a data set with string labels and float inputs
        >>> data = TrainingSet()
        >>> data.append(LabeledExample([3.16,5.07], label = 'Blue'))
        >>> data.append(LabeledExample([3.32,4.84], label = 'Blue'))
        >>> data.append(LabeledExample([2.97,4.84], label = 'Blue'))
        >>> data.append(LabeledExample([3.32,4.38], label = 'Red'))
        >>> data.append(LabeledExample([2.88,3.90], label = 'Red'))
        >>> data.append(LabeledExample([3.12,4.08], label = 'Red'))
        
        Create a fisher linear discriminant with 2 dimensions
        >>> fisher = FisherLinearDiscriminant(data, d=2)
        
        Look at the weight array generated by fisher linear discriminant
        >>> array(fisher.W)
        array([[ 0.28085246],
               [-0.58321199]])
               
        create a fisher linear discriminant with 1 dimension
        >>> fisher = FisherLinearDiscriminant(data, d=1)
        
        look at the weight array generated by fisher linear discriminant
        >>> array(fisher.W)
        array([[ 0.28085246],
               [-0.58321199]])
        """
        self.labels = []
        self.data = []
        self.d = d
        
        # Gather the training data in a format we can use
        for example in trainingSet:
            if example.label in self.labels:
                self.data[self.labels.index(example.label)].extend([list(example)])
            else:
                self.labels.append(example.label)
                self.data.append([list(example)])
        
        mk = []
        m=[]
        for x in self.data:
          total = x[0]
          for z in range(0,len(x[0])):
              total[z]=0
          for y in x:
            for z in range(0,len(y)):
              total[z]+=y[z]
          m.append(total)
          for w in range(0,len(total)):
            total[w]=total[w]/len(x)
          mk.append(total)

        n = [1.0 * len(x) for x in self.data]
        #mt wasn't doing anything...
        #mt = sum([ni * mi for (ni, mi) in zip(n, m)]) / sum(n)
        mt = sum(m)/sum(n)

        # With-in class scatter
        Sw = [_matrixSum([mat(mat(x) - mat(mk[i])).T * mat(mat(x) - mat(mk[i])) for x in
                self.data[i]]) for i in range(len(self.data))]
        Swt = _matrixSum(Sw)

        # Between class scatter
        Sb = [n[i] * (mat(mat(mk[i]) - mat(mt)).T * mat(mat(mk[i]) - mat(mt))) for i in range(len(mk))]
        Sbt = _matrixSum(Sb)
        
        tempw=[]
      # Calculate the eigenvectors, and set W to be the 'd' columns with largest eigenvalues
        (e, V) = linalg.eig(Swt.I * Sbt)
        for i in range(0,d):
          mymax = e[0]
          mymin = e[0]
          index=0
          for j in range(0,len(e)):
            if e[j]>mymax:
              mymax=e[j]
              index=j
            if e[j]<mymin:
              mymin=e[j]
          e[index]=mymin-1
          tempw.append(V[index])
          
        self.W=mat(tempw[0]).T

    def project(self, data):        
        """Projects data point(s) with the W in this Fisher Linear Discriminant
        
        When we test Fisher Linear Discriminant we need to import parts of the ML1050 library
        >>> from Example import LabeledExample
        >>> from ML1050.TrainingSet import TrainingSet
        >>> from TrainingSet import createTrainingSet
        >>> from scipy import array
        >>> from ML1050.Preprocessing.FisherLinearDiscriminant import *
        
        create a data set with string labels and float inputs
        >>> data = TrainingSet()
        >>> data.append(LabeledExample([3.16,5.07], label = 'Blue'))
        >>> data.append(LabeledExample([3.32,4.84], label = 'Blue'))
        >>> data.append(LabeledExample([2.97,4.84], label = 'Blue'))
        >>> data.append(LabeledExample([3.32,4.38], label = 'Red'))
        >>> data.append(LabeledExample([2.88,3.90], label = 'Red'))
        >>> data.append(LabeledExample([3.12,4.08], label = 'Red'))
        
        create a fisher linear discriminant with 2 dimensions
        >>> fisher = FisherLinearDiscriminant(data, d=2)
        
        project a data point. 
        Note: we are rounding the floating point so the unit tests don't fail 
        because of precision
        >>> roundList(fisher.project(data[0]), 2)
        [['-2.07']]
        
        project two data points
        >>> roundList(fisher.project(data[:2]), 2)
        [['-2.07'], ['-1.89']]
        
        project a data point
        >>> lessdata = data[1:2]
        >>> roundList(fisher.project(lessdata), 2)
        [['-1.89']]
        """
        # If we are projecting one ML1050.LabeledExample, just multiply it with W
        rv = []
        if isinstance(data, LabeledExample):
            projection = list(array(data * self.W)[0])
            rv.append( LabeledExample(projection, label=data.label) )
            # If we are projecting a ML1050.TrainingSet, project all of the points in it
        elif isinstance(data, TrainingSet) or isinstance(data, list):
            for xi in data:
                rv.extend(self.project(xi))
        else:
            raise TypeError, 'Cannot project this data type'
        return rv

def _matrixSum(m):
    """Returns the sum of a list of matrices
    
    >>> from scipy import mat
    >>> from scipy import array
    >>> a = mat('[1 2; 3 4]')
    >>> b = mat('[2 3; 4 5]')
    >>> array(_matrixSum([a, b]))
    array([[3, 5],
           [7, 9]])
    """
    total = 0
    for x in m:
        total += x
    return total
    
def _test():
    """Run the tests in the documentation strings.
    """
    import doctest
    return doctest.testmod(verbose=True)
    
if __name__ == "__main__":
    try:
        __IP                            # Are we running IPython?
    except NameError:
        _test()                         # If not, run the tests
